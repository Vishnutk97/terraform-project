# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

variables:
  resource_group_name = "AZ_RG"
  storage_account_name = "workshopdemostorage8907"
  container_name = "workshopdemotf"
  key = "terraform.tfstate"

stages:
 - stage: tfvalidate
   jobs:
     - job: validate
       continueOnError: false
       steps:
       - task: TerraformInstaller@1
         displayName: tfinstall
         inputs:
           terraformVersion: 'latest'
       - task: TerraformTaskV4@4
         displayName: init
         inputs:
           provider: 'azurerm'
           command: 'init'
           backendServiceArm: 'DevTestServiceConnection'
           backendAzureRmResourceGroupName: '$(resource_group_name)'
           backendAzureRmStorageAccountName: '$(storage_account_name)'
           backendAzureRmContainerName: '$(container_name)'
           backendAzureRmKey: '$(key)'

       - task: TerraformTaskV4@4
         displayname: validate
         inputs:
            provider: 'azurerm'
            command: 'validate'
 - stage: tf deploy
   condition: succeeed ('tfvalidate')
   dependsOn: tfvalidate  
   jobs:
      - job: apply
        steps:

         - task: TerraformInstaller@1
           displayName: tfinstall
           inputs:
            terraformVersion: 'latest'
         - task: TerraformTaskV4@4
           displayName: init
           inputs:
           provider: 'azurerm'
           command: 'init'
           backendServiceArm: 'DevTestServiceConnection'
           backendAzureRmResourceGroupName: '$(resource_group_name)'
           backendAzureRmStorageAccountName: '$(storage_account_name)'
           backendAzureRmContainerName: '$(container_name)'
           backendAzureRmKey: '$(key)'

         - task: TerraformTaskV4@4
           inputs:
            provider: 'azurerm'
            command: 'plan'
            environmentServiceNameAzureRM: 'DevTestServiceConnection'

         - task: TerraformTaskV4@4
           inputs:
            provider: 'azurerm'
            command: 'apply'
            environmentServiceNameAzureRM: 'DevTestServiceConnection'



